{"ast":null,"code":"var _jsxFileName = \"/Users/srushtidiware/Desktop/SwiftChat/frontend/src/components/chats/SingleChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { Box, FormControl, IconButton, Input, Spinner, Text, useToast } from \"@chakra-ui/react\";\nimport ScrolableChat from \"./ScrolableChat\";\nimport io from 'socket.io-client';\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport { getSender, getSenderFull } from \"../../config/chatLogic\";\nimport ProfileModal from \"./ProfileModal\";\nimport UpdateCommunity from \"./UpdateCommunity\";\nimport './style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://localhost:5080\";\nvar socket, selectedSocketCompare;\nfunction SingleChat(props) {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessages, setNewMessages] = useState();\n  const {\n    user,\n    selectedChat,\n    setSelectedChat,\n    notifications,\n    setNotifications\n  } = ChatState();\n  const [socketConnected, setsocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [isTyping, setIsTyping] = useState(false);\n  const toast = useToast();\n  const sendMessage = async event => {\n    if (event.key == \"Enter\" && newMessages) {\n      socket.emit('stop typing', selectedChat._id);\n      try {\n        const config = {\n          headers: {\n            \"Content-type\": \"application/json\",\n            Authorization: `Bearer ${user.token}`\n          }\n        };\n        setNewMessages(\"\");\n        const {\n          data\n        } = await axios.post('http://localhost:5080/api/message', {\n          content: newMessages,\n          chatId: selectedChat._id\n        }, config);\n        console.log(data);\n        console.log(\"****\");\n        socket.emit('new message', data);\n        setMessages([...messages, data]);\n      } catch (error) {\n        toast({\n          title: \"error occured\",\n          status: \"warning\",\n          duration: 5000,\n          isClosable: true,\n          position: \"top-left\"\n        });\n      }\n    }\n  };\n  const fetchChats = async () => {\n    if (!selectedChat) {\n      return;\n    }\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`\n        }\n      };\n      const {\n        data\n      } = await axios.get(`http://localhost:5080/api/message/${selectedChat._id}`, config);\n      // console.log(data);\n      setMessages(data);\n      setLoading(false);\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"error occured\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\"\n      });\n    }\n  };\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit('setup', user);\n    socket.on('connection', () => {\n      setsocketConnected(true);\n    });\n    socket.on('typing', () => setIsTyping(true));\n    socket.on('stop typing', () => setIsTyping(false));\n  }, []);\n  useEffect(() => {\n    fetchChats();\n    selectedSocketCompare = selectedChat;\n  }, [selectedChat]);\n  console.log(notifications);\n  useEffect(() => {\n    socket.on(\"message recieved\", newMessage => {\n      if (!selectedSocketCompare || selectedSocketCompare._id !== newMessage.chat._id) {\n        //give notifications\n        if (!notifications.includes(newMessage)) {\n          setNotifications([newMessage, ...notifications]);\n          props.setFetchAgain(!props.fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessage]);\n      }\n    });\n  });\n  const typingHandler = e => {\n    setNewMessages(e.target.value);\n    if (!socketConnected) {\n      return;\n    }\n    if (!typing) {\n      setTyping(true);\n      socket.emit('typing', selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timer = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      let timeDiff = timeNow - lastTypingTime;\n      if (timeDiff > timer && typing) {\n        socket.emit('stop typing', selectedChat._id);\n        setTyping(false);\n      }\n    }, timer);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Text, {\n        fontSize: {\n          base: \"28px\",\n          md: \"30px\"\n        },\n        pb: 3,\n        px: 2,\n        w: \"100%\",\n        fontFamily: \"Work sans\",\n        display: \"flex\",\n        justifyContent: {\n          base: \"space-between\"\n        },\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          display: {\n            base: \"flex\",\n            md: \"none\"\n          },\n          icon: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 21\n          }, this),\n          onClick: () => {\n            setSelectedChat(\"\");\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this), !selectedChat.isCommunity ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: getSender(user, selectedChat)\n        }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [selectedChat.chatName.toUpperCase(), /*#__PURE__*/_jsxDEV(UpdateCommunity, {\n            fetchAgain: props.fetchAgain,\n            setFetchAgain: props.setFetchAgain,\n            fetchChats: fetchChats\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        display: \"flex\",\n        flexDir: \"column\",\n        p: 3,\n        bg: \"#E8E8E8\",\n        width: \"100%\",\n        height: \"100%\",\n        borderRadius: \"lg\",\n        overflowY: \"hidden\",\n        children: [loading ? /*#__PURE__*/_jsxDEV(Spinner, {\n          w: 20,\n          h: 20,\n          alignSelf: \"center\",\n          margin: \"auto\",\n          size: \"lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"messages\",\n          children: /*#__PURE__*/_jsxDEV(ScrolableChat, {\n            messages: messages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 200,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n          onKeyDown: sendMessage,\n          isRequired: true,\n          mt: 3,\n          children: [isTyping ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"typing...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 27\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false), /*#__PURE__*/_jsxDEV(Input, {\n            variant: \"filled\",\n            bg: \"#E0E0E0\",\n            placeholder: \"Enter a message...\",\n            onChange: typingHandler,\n            value: newMessages\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      h: \"100%\",\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        fontSize: \"3xl\",\n        pb: 3,\n        fontFamily: \"Work sans\",\n        children: \"Select a user\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n_s(SingleChat, \"uxLJeau7RKX/UHH+Quim+0/4JCg=\", false, function () {\n  return [useToast];\n});\n_c = SingleChat;\nexport default SingleChat;\nvar _c;\n$RefreshReg$(_c, \"SingleChat\");","map":{"version":3,"names":["React","useEffect","ChatState","useState","axios","Box","FormControl","IconButton","Input","Spinner","Text","useToast","ScrolableChat","io","ArrowBackIcon","getSender","getSenderFull","ProfileModal","UpdateCommunity","jsxDEV","_jsxDEV","Fragment","_Fragment","ENDPOINT","socket","selectedSocketCompare","SingleChat","props","_s","messages","setMessages","loading","setLoading","newMessages","setNewMessages","user","selectedChat","setSelectedChat","notifications","setNotifications","socketConnected","setsocketConnected","typing","setTyping","isTyping","setIsTyping","toast","sendMessage","event","key","emit","_id","config","headers","Authorization","token","data","post","content","chatId","console","log","error","title","status","duration","isClosable","position","fetchChats","get","on","newMessage","chat","includes","setFetchAgain","fetchAgain","typingHandler","e","target","value","lastTypingTime","Date","getTime","timer","setTimeout","timeNow","timeDiff","children","fontSize","base","md","pb","px","w","fontFamily","display","justifyContent","alignItems","icon","fileName","_jsxFileName","lineNumber","columnNumber","onClick","isCommunity","chatName","toUpperCase","flexDir","p","bg","width","height","borderRadius","overflowY","h","alignSelf","margin","size","className","onKeyDown","isRequired","mt","variant","placeholder","onChange","_c","$RefreshReg$"],"sources":["/Users/srushtidiware/Desktop/SwiftChat/frontend/src/components/chats/SingleChat.js"],"sourcesContent":["import React, { useEffect } from \"react\";\r\nimport { ChatState } from \"../../Context/ChatProvider\";\r\nimport { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  Box,\r\n  FormControl,\r\n  IconButton,\r\n  Input,\r\n  Spinner,\r\n  Text,\r\n  useToast,\r\n} from \"@chakra-ui/react\";\r\nimport ScrolableChat from \"./ScrolableChat\";\r\nimport io from 'socket.io-client';\r\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\r\nimport { getSender, getSenderFull } from \"../../config/chatLogic\";\r\nimport ProfileModal from \"./ProfileModal\";\r\nimport UpdateCommunity from \"./UpdateCommunity\";\r\nimport './style.css';\r\nconst ENDPOINT = \"http://localhost:5080\";\r\nvar socket, selectedSocketCompare;\r\nfunction SingleChat(props) {\r\n  const [messages, setMessages] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [newMessages, setNewMessages] = useState();\r\n  const { user, selectedChat, setSelectedChat,notifications,setNotifications} = ChatState();\r\n  const [socketConnected, setsocketConnected] = useState(false);\r\n  const [typing, setTyping] = useState(false);\r\n  const [isTyping, setIsTyping] = useState(false);\r\n  const toast = useToast();\r\n  \r\n  const sendMessage = async (event) => {\r\n    if (event.key == \"Enter\" && newMessages) {\r\n      socket.emit('stop typing', selectedChat._id);\r\n      try {\r\n        const config = {\r\n          headers: {\r\n            \"Content-type\": \"application/json\",\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n          };\r\n           setNewMessages(\"\");\r\n          const { data } = await axios.post('http://localhost:5080/api/message', {\r\n              content: newMessages,\r\n              chatId: selectedChat._id\r\n          }, config);\r\n          console.log(data);\r\n          console.log(\"****\");\r\n        socket.emit('new message', data);\r\n        setMessages([...messages, data]);\r\n      } catch (error) {\r\n          toast({\r\n        title: \"error occured\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n      }\r\n    }\r\n  };\r\n  \r\n  const fetchChats = async () => {\r\n    if (!selectedChat) {\r\n      return;\r\n    }\r\n    try {\r\n         const config = {\r\n          headers: {\r\n            Authorization: `Bearer ${user.token}`,\r\n          },\r\n      };\r\n      const { data } = await axios.get(`http://localhost:5080/api/message/${selectedChat._id}`, config);\r\n      // console.log(data);\r\n      setMessages(data);\r\n      setLoading(false);\r\n      socket.emit(\"join chat\", selectedChat._id);\r\n    } catch (error) {\r\n           toast({\r\n        title: \"error occured\",\r\n        status: \"warning\",\r\n        duration: 5000,\r\n        isClosable: true,\r\n        position: \"top-left\",\r\n      });\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    socket = io(ENDPOINT);\r\n    socket.emit('setup', user);\r\n    socket.on('connection', () => {\r\n      setsocketConnected(true);\r\n    })\r\n\r\n    socket.on('typing', () => setIsTyping(true));\r\n    socket.on('stop typing', () => setIsTyping(false));\r\n  }, [])\r\n  useEffect(() => {\r\n    fetchChats();\r\n    selectedSocketCompare = selectedChat;\r\n  }, [selectedChat])\r\n  console.log(notifications);\r\n  useEffect(() => {\r\n    socket.on(\"message recieved\", (newMessage) => {\r\n      if (!selectedSocketCompare || selectedSocketCompare._id !== newMessage.chat._id) {\r\n           //give notifications\r\n        if (!notifications.includes(newMessage)) {\r\n          setNotifications([newMessage, ...notifications]);\r\n          props.setFetchAgain(!props.fetchAgain);\r\n        }\r\n      } else {\r\n        setMessages([...messages, newMessage]);\r\n      }\r\n    })\r\n  })\r\n  const typingHandler = (e) => {\r\n    setNewMessages(e.target.value);\r\n    if (!socketConnected) {\r\n      return;\r\n    }\r\n    if (!typing) {\r\n      setTyping(true);\r\n      socket.emit('typing', selectedChat._id);\r\n    }\r\n    let lastTypingTime = new Date().getTime();\r\n    var timer = 3000;\r\n    setTimeout(() => {\r\n      var timeNow = new Date().getTime();\r\n      let timeDiff = timeNow - lastTypingTime;\r\n      if (timeDiff > timer && typing) {\r\n        socket.emit('stop typing', selectedChat._id);\r\n        setTyping(false);\r\n      }\r\n    }, timer);\r\n\r\n  };\r\n  \r\n  return (\r\n    <>\r\n      {selectedChat ? (\r\n        <>\r\n          <Text\r\n            fontSize={{ base: \"28px\", md: \"30px\" }}\r\n            pb={3}\r\n            px={2}\r\n            w=\"100%\"\r\n            fontFamily=\"Work sans\"\r\n            display=\"flex\"\r\n            justifyContent={{ base: \"space-between\" }}\r\n            alignItems=\"center\"\r\n          >\r\n            <IconButton\r\n              display={{ base: \"flex\", md: \"none\" }}\r\n              icon={<ArrowBackIcon />}\r\n              onClick={() => {\r\n                setSelectedChat(\"\");\r\n              }}\r\n            />\r\n            {!selectedChat.isCommunity ? (\r\n              <>\r\n                {getSender(user, selectedChat)}\r\n                {/* <ProfileModal info={getSenderFull(user,selectedChat)}/> */}\r\n              </>\r\n            ) : (\r\n              <>\r\n                {selectedChat.chatName.toUpperCase()}\r\n                <UpdateCommunity\r\n                  fetchAgain={props.fetchAgain}\r\n                    setFetchAgain={props.setFetchAgain}\r\n                    fetchChats={fetchChats}\r\n                />\r\n              </>\r\n            )}\r\n          </Text>\r\n\r\n          <Box\r\n            display=\"flex\"\r\n            flexDir=\"column\"\r\n            p={3}\r\n            bg=\"#E8E8E8\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            borderRadius=\"lg\"\r\n            overflowY=\"hidden\"\r\n          >\r\n            {/* <div className=\"messages\">\r\n                  Helooojk\r\n                </div> */}\r\n            {loading ? (\r\n              <Spinner\r\n                w={20}\r\n                h={20}\r\n                alignSelf=\"center\"\r\n                margin=\"auto\"\r\n                size=\"lg\"\r\n              />\r\n            ) : (\r\n                <div className=\"messages\">\r\n                  <ScrolableChat  messages={ messages} />\r\n                </div>\r\n            )} \r\n            <FormControl onKeyDown={sendMessage} isRequired mt={3}>\r\n              {isTyping ? <div>\r\n                typing...\r\n              </div>:<></>}\r\n              <Input\r\n                variant=\"filled\"\r\n                bg=\"#E0E0E0\"\r\n                placeholder=\"Enter a message...\"\r\n                onChange={typingHandler}\r\n                value={newMessages}\r\n              />\r\n            </FormControl>\r\n          </Box>\r\n        </>\r\n      ) : (\r\n        <Box\r\n          display=\"flex\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"center\"\r\n          h=\"100%\"\r\n        >\r\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\r\n            Select a user\r\n          </Text>\r\n        </Box>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default SingleChat;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}